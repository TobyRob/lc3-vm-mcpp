.ORIG x3000
TRAP 0x29 ; get player position

;CHECKS X COOR
ADD R0 R0 #0
BRn NEGX ;CHECKS IF NEGATIVE

JSR POSITIVE_X
BRnzp SKIP_X ; skips negative jump

NEGX ; JUMPS IF NEGATIVE
JSR NEGATIVE_X

SKIP_X

; Y COORDINATE
ADD R1 R1 #0
BRn NEGY ;CHECKS IF NEGATIVE

JSR POSITIVE_Y
BRnzp SKIP_Y ; skips negative jump

NEGY ; JUMPS IF NEGATIVE
JSR NEGATIVE_Y

SKIP_Y

; Z COORDINATE
ADD R2 R2 #0
BRn NEGZ ;CHECKS IF NEGATIVE

JSR POSITIVE_Z
BRnzp SKIP_Z ; skips negative jump

NEGZ ; JUMPS IF NEGATIVE
JSR NEGATIVE_Z

SKIP_Z

TRAP 0x27

;R5 IS TOTAL FOR A DIFFERENCE

HALT

NEGATIVE_X ; JUMP

; R3 IS COORDINATE
LD R3 A_X 

; changing to negative
NOT R3 R3
ADD R3 R3 #1 
ADD R4 R0 R3  ; TWO NEGATIVES 
;CHANGING DIFFERENCE TO POSITIVE
NOT R4 R4 
ADD R4 R4 #1
ADD R5 R5 R4 
;RESET
AND R4 R4 #0
AND R3 R3 #0 
; STORES IN MEMORY 
RET
;END OF NEGATIVE

POSITIVE_X ; JMP

LD R3 A_X

NOT R3 R3
ADD R3 R3 #1

ADD R4 R0 R3
BRp POSITIVE_X_SKIP ; IF ANSWER IS POSITIVE BECAUSE COORDINATE WAS SMALLER POSITIVE THAN PLAYER X OR WAS NEGATIVE
; COORDINATE WAS BIGGER THEN PLAYER X
NOT R4 R4
ADD R4 R4 #1

POSITIVE_X_SKIP ; SKIPS 

ADD R5 R5 R4
;RESETS
AND R4 R4 #0 
AND R3 R3 #0
;STORES IN MEMORY
RET



; Y AXIS 
NEGATIVE_Y ; JUMP

; R3 IS COORDINATE
LD R3 A_Y 

; changing to negative
NOT R3 R3
ADD R3 R3 #1 
ADD R4 R1 R3  ; TWO NEGATIVES 
;CHANGING DIFFERENCE TO POSITIVE
NOT R4 R4 
ADD R4 R4 #1
ADD R5 R5 R4 
;RESET
AND R4 R4 #0
AND R3 R3 #0 
; STORES IN MEMORY
RET
;END OF NEGATIVE

POSITIVE_Y ; JMP

LD R3 A_Y

NOT R3 R3
ADD R3 R3 #1

ADD R4 R1 R3
BRp POSITIVE_Y_SKIP ; IF ANSWER IS POSITIVE BECAUSE COORDINATE WAS SMALLER POSITIVE THAN PLAYER X OR WAS NEGATIVE
; COORDINATE WAS BIGGER THEN PLAYER X
NOT R4 R4
ADD R4 R4 #1

POSITIVE_Y_SKIP ; SKIPS 

ADD R5 R5 R4
;RESETS
AND R4 R4 #0 
AND R3 R3 #0
;STORES IN MEMORY
RET



; Z AXIS 
NEGATIVE_Z ; JUMP

; R3 IS COORDINATE
LD R3 A_Z 

; changing to negative
NOT R3 R3
ADD R3 R3 #1 
ADD R4 R1 R3  ; TWO NEGATIVES 
;CHANGING DIFFERENCE TO POSITIVE
NOT R4 R4 
ADD R4 R4 #1
ADD R5 R5 R4 
;RESET
AND R4 R4 #0
AND R3 R3 #0 
; STORES IN MEMORY 
RET
;END OF NEGATIVE

POSITIVE_Z ; JMP

LD R3 A_Z

NOT R3 R3
ADD R3 R3 #1

ADD R4 R2 R3
BRp POSITIVE_Z_SKIP ; IF ANSWER IS POSITIVE BECAUSE COORDINATE WAS SMALLER POSITIVE THAN PLAYER X OR WAS NEGATIVE
; COORDINATE WAS BIGGER THEN PLAYER X
NOT R4 R4
ADD R4 R4 #1

POSITIVE_Z_SKIP ; SKIPS 

ADD R5 R5 R4
;RESETS
AND R4 R4 #0 
AND R3 R3 #0
;STORES IN MEMORY
RET


A_X .FILL #1
A_Y .FILL #2
A_Z .FILL #3
B_X .FILL #20
B_Y .FILL #32
B_Z .FILL #-8
.END